package imageneditor.analisis;

import java_cup.runtime.*;
import imageneditor.frontEnd.buttonPlace;
import java.util.LinkedList;
import imageneditor.exceptions.InputsVaciosException;
import imageneditor.DefaultValue;
import imageneditor.objectsManager.miniPaintManager;

parser code {:

	miniPaintManager miniPM;
	int dimension;
	int posX 	= DefaultValue.NO_INICIO_DIMENSION;
	int posXint = DefaultValue.NO_INICIO_DIMENSION;
	int posY 	= DefaultValue.NO_INICIO_DIMENSION;
	int posYint = DefaultValue.NO_INICIO_DIMENSION;
	String name = "";

	public miniPaint(Lexer lex, int dimension, miniPaintManager miniPM){
		super(lex);
		this.dimension = dimension;
		this.miniPM = miniPM;
	}

	private void setName(String name) throws InputsVaciosException {
		if (this.name.equals("")) {
			this.name = name;
		} else {
			throw new InputsVaciosException("The name " + name + " can't set");
		}
	}

	private void setPosX(int xPnt) throws InputsVaciosException {
		if (posX == DefaultValue.NO_INICIO_DIMENSION) {
			posX = xPnt;
		} else {
			throw new InputsVaciosException("Posicion en X >>" + xPnt + "<< can't set");
		}
	}

	private void setPosXint(int xPnt) throws InputsVaciosException {
		if (posXint == DefaultValue.NO_INICIO_DIMENSION) {
			posXint = xPnt;
		} else {
			throw new InputsVaciosException("Posicion en X >>" + xPnt + "<< can't set");
		}
	}

	private void setPosY(int yPnt) throws InputsVaciosException {
		if (posY == DefaultValue.NO_INICIO_DIMENSION) {
			posY = yPnt;
		} else {
			throw new InputsVaciosException("Posicion en Y >>" + yPnt + "<< can't set");
		}
	}

	private void setPosYint(int yPnt) throws InputsVaciosException {
		if (posYint == DefaultValue.NO_INICIO_DIMENSION) {
			posYint = yPnt;
		} else {
			throw new InputsVaciosException("Posicion en Y >>" + yPnt + "<< can't set");
		}
	}

	public void syntax_error(Symbol cur_token) {
		String message = "Estructura invalida en posiciÃ³n " + cur_token.right
			 + ", token: " + cur_token.value;
		System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<");	 
		System.out.println(message);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
	}

	public void returnCom() throws InputsVaciosException {
		if ((posX>DefaultValue.NO_INICIO_DIMENSION) && (posY>DefaultValue.NO_INICIO_DIMENSION) 
			&& (posXint==DefaultValue.NO_INICIO_DIMENSION) && (posYint==DefaultValue.NO_INICIO_DIMENSION)) {
			miniPM.getAuxPaint().setName(name);
			miniPM.getAuxPaint().setPosX(posX);
			miniPM.getAuxPaint().setPosXemd(posXint);
			miniPM.getAuxPaint().setPosY(posY);
			miniPM.getAuxPaint().setPosYemd(posYint);
		} else if ((posX>DefaultValue.NO_INICIO_DIMENSION) && (posY>DefaultValue.NO_INICIO_DIMENSION) && 
			(posXint>DefaultValue.NO_INICIO_DIMENSION) && (posYint==DefaultValue.NO_INICIO_DIMENSION) &&
			(posX<posXint) && (posX<=dimension) && (posXint<=dimension) && (posY<=dimension)) {
			miniPM.getAuxPaint().setName(name);
			miniPM.getAuxPaint().setPosX(posX);
			miniPM.getAuxPaint().setPosXemd(posXint);
			miniPM.getAuxPaint().setPosY(posY);
			miniPM.getAuxPaint().setPosYemd(posYint);
		} else if ((posX>DefaultValue.NO_INICIO_DIMENSION) && (posY>DefaultValue.NO_INICIO_DIMENSION) && 
			(posXint==DefaultValue.NO_INICIO_DIMENSION) && (posYint>DefaultValue.NO_INICIO_DIMENSION) &&
			(posY<posYint) && (posY<=dimension) && (posYint<=dimension) && (posX<=dimension)) {
			miniPM.getAuxPaint().setName(name);
			miniPM.getAuxPaint().setPosX(posX);
			miniPM.getAuxPaint().setPosXemd(posXint);
			miniPM.getAuxPaint().setPosY(posY);
			miniPM.getAuxPaint().setPosYemd(posYint);
		} else if ((posX>DefaultValue.NO_INICIO_DIMENSION) && (posY>DefaultValue.NO_INICIO_DIMENSION) && 
			(posXint>DefaultValue.NO_INICIO_DIMENSION) && (posYint>DefaultValue.NO_INICIO_DIMENSION) &&
			(posX<posXint) && (posY<posYint) && (posY<=dimension) && (posYint<=dimension) && (posX<=dimension) && (posXint<=dimension)) {
			miniPM.getAuxPaint().setName(name);
			miniPM.getAuxPaint().setPosX(posX);
			miniPM.getAuxPaint().setPosXemd(posXint);
			miniPM.getAuxPaint().setPosY(posY);
			miniPM.getAuxPaint().setPosYemd(posYint);
		} else {
			throw new InputsVaciosException("Invalid rank");
		}
		clear();
	}

	private void clear(){
		posX 	= DefaultValue.NO_INICIO_DIMENSION;
		posXint = DefaultValue.NO_INICIO_DIMENSION;
		posY 	= DefaultValue.NO_INICIO_DIMENSION;
		posYint = DefaultValue.NO_INICIO_DIMENSION;
		name = "";
	}
:}

/* Terminal */
terminal String Pintar, Vars, Colores, Dimension, Cuadro, Hex, Tipo, Fondo,Red, Blue, Green; 
terminal String Tamanio, Nombre, Lienzos, Igual, Menos, Mas, Coma, Intervalo, DosPuntos, PuntoYComa; 
terminal String ParAbierto, ParCerrado, CorAbierto, CorCerrado, LlaveAbierta, LlaveCerrada;
terminal String Comment, HexaCode, Cadena, Identificador, NewVar, Instrucciones,Entero;

/* Non terminal */
non terminal String PAINT_COM, POS_X, POS_Y;

start with PAINT_COM;

PAINT_COM	::= Pintar ParAbierto Identificador:e Coma POS_X Coma POS_Y ParCerrado PuntoYComa {: setName(e); returnCom();:}
				| error:e {: System.out.println("Error al usar el mini comando"); :} 
				;

POS_X		::= Entero:e 										{: setPosX(Integer.parseInt(e)); :}
				| Entero:e1 Intervalo Entero:e2 				{: setPosX(Integer.parseInt(e1)); setPosXint(Integer.parseInt(e2)); :}
				;

POS_Y		::= Entero:e 										{: setPosY(Integer.parseInt(e)); :}
				| Entero:e1 Intervalo Entero:e2 				{: setPosY(Integer.parseInt(e1)); setPosYint(Integer.parseInt(e2)); :}
				;
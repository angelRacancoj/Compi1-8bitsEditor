
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package imageneditor.analisis;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class canvas extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public canvas() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public canvas(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public canvas(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\002\011\000\002\003" +
    "\011\000\002\003\007\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\005\000\002\006\005\000\002\007\007\000\002\011" +
    "\005\000\002\011\003\000\002\012\007\000\002\012\007" +
    "\000\002\012\007\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\010\015\000\002\010\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\004\033\005\001\002\000\004\002\120\001" +
    "\002\000\004\021\006\001\002\000\004\027\007\001\002" +
    "\000\004\033\010\001\002\000\004\043\011\001\002\000" +
    "\004\027\015\001\002\000\004\034\013\001\002\000\004" +
    "\034\014\001\002\000\004\002\000\001\002\000\004\033" +
    "\016\001\002\000\012\015\017\016\023\017\022\020\020" +
    "\001\002\000\004\027\116\001\002\000\004\027\114\001" +
    "\002\000\006\025\112\034\ufff7\001\002\000\004\027\070" +
    "\001\002\000\004\027\041\001\002\000\006\025\037\034" +
    "\ufff8\001\002\000\004\034\034\001\002\000\006\025\032" +
    "\034\ufff9\001\002\000\006\025\030\034\ufff6\001\002\000" +
    "\012\015\017\016\023\017\022\020\020\001\002\000\004" +
    "\034\ufffa\001\002\000\012\015\017\016\023\017\022\020" +
    "\020\001\002\000\004\034\ufffd\001\002\000\006\025\035" +
    "\034\ufffe\001\002\000\004\043\011\001\002\000\004\034" +
    "\uffff\001\002\000\012\015\017\016\023\017\022\020\020" +
    "\001\002\000\004\034\ufffc\001\002\000\004\033\042\001" +
    "\002\000\012\011\044\012\046\013\047\014\045\001\002" +
    "\000\004\034\067\001\002\000\004\027\065\001\002\000" +
    "\004\027\061\001\002\000\004\027\055\001\002\000\004" +
    "\027\051\001\002\000\004\034\ufff1\001\002\000\004\041" +
    "\052\001\002\000\006\025\053\034\uffec\001\002\000\010" +
    "\012\046\013\047\014\045\001\002\000\004\034\uffef\001" +
    "\002\000\004\041\056\001\002\000\006\025\057\034\uffed" +
    "\001\002\000\010\012\046\013\047\014\045\001\002\000" +
    "\004\034\ufff0\001\002\000\004\041\062\001\002\000\006" +
    "\025\063\034\uffeb\001\002\000\010\012\046\013\047\014" +
    "\045\001\002\000\004\034\uffee\001\002\000\004\040\066" +
    "\001\002\000\004\034\ufff2\001\002\000\006\025\ufff3\034" +
    "\ufff3\001\002\000\004\033\071\001\002\000\006\007\073" +
    "\010\072\001\002\000\004\027\103\001\002\000\004\027" +
    "\074\001\002\000\004\041\075\001\002\000\004\025\076" +
    "\001\002\000\004\010\077\001\002\000\004\027\100\001" +
    "\002\000\004\041\101\001\002\000\004\034\102\001\002" +
    "\000\006\025\uffe9\034\uffe9\001\002\000\004\041\104\001" +
    "\002\000\004\025\105\001\002\000\004\007\106\001\002" +
    "\000\004\027\107\001\002\000\004\041\110\001\002\000" +
    "\004\034\111\001\002\000\006\025\uffea\034\uffea\001\002" +
    "\000\012\015\017\016\023\017\022\020\020\001\002\000" +
    "\004\034\ufffb\001\002\000\004\042\115\001\002\000\006" +
    "\025\ufff5\034\ufff5\001\002\000\004\042\117\001\002\000" +
    "\006\025\ufff4\034\ufff4\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\024\005\025\006\023\007\020\010\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\030" +
    "\005\025\006\023\007\020\010\026\001\001\000\002\001" +
    "\001\000\014\004\032\005\025\006\023\007\020\010\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\035\001\001\000\002\001\001\000\014\004\037\005\025" +
    "\006\023\007\020\010\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\042\012\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\112\005\025\006\023\007" +
    "\020\010\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$canvas$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$canvas$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$canvas$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public void syntax_error(Symbol cur_token) {
		String message = "Estructura invalida en posiciÃ³n " + cur_token.right
			 + ", token: " + cur_token.value;
		System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<");	 
		System.out.println(message);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$canvas$actions {
  private final canvas parser;

  /** Constructor */
  CUP$canvas$actions(canvas parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$canvas$do_action_part00000000(
    int                        CUP$canvas$act_num,
    java_cup.runtime.lr_parser CUP$canvas$parser,
    java.util.Stack            CUP$canvas$stack,
    int                        CUP$canvas$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$canvas$result;

      /* select the action based on the action number */
      switch (CUP$canvas$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CANVAS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$canvas$stack.elementAt(CUP$canvas$top-1)).value;
		RESULT = start_val;
              CUP$canvas$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-1)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$canvas$parser.done_parsing();
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CANVAS ::= CorAbierto Lienzos DosPuntos CorAbierto CUERPO CorCerrado CorCerrado 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CANVAS",0, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-6)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= Identificador DosPuntos CorAbierto CARACTERISTICAS CorCerrado Coma CUERPO 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-6)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= Identificador DosPuntos CorAbierto CARACTERISTICAS CorCerrado 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-4)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CARACTERISTICAS ::= NOMBRE Coma CARACTERISTICAS 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS",2, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-2)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CARACTERISTICAS ::= TIPO Coma CARACTERISTICAS 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS",2, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-2)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CARACTERISTICAS ::= FONDO Coma CARACTERISTICAS 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS",2, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-2)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CARACTERISTICAS ::= TAMANIO Coma CARACTERISTICAS 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS",2, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-2)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CARACTERISTICAS ::= NOMBRE 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS",2, ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CARACTERISTICAS ::= TIPO 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS",2, ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CARACTERISTICAS ::= FONDO 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS",2, ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CARACTERISTICAS ::= TAMANIO 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS",2, ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NOMBRE ::= Nombre DosPuntos Cadena 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("NOMBRE",3, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-2)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= Tipo DosPuntos Cadena 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-2)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FONDO ::= Fondo DosPuntos CorAbierto COLOR CorCerrado 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("FONDO",5, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-4)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COLOR ::= Hex DosPuntos HexaCode 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("COLOR",7, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-2)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COLOR ::= CLRGB 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("COLOR",7, ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CLRGB ::= Red DosPuntos Entero Coma CLRGB 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CLRGB",8, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-4)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CLRGB ::= Blue DosPuntos Entero Coma CLRGB 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CLRGB",8, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-4)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CLRGB ::= Green DosPuntos Entero Coma CLRGB 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CLRGB",8, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-4)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CLRGB ::= Red DosPuntos Entero 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CLRGB",8, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-2)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CLRGB ::= Blue DosPuntos Entero 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CLRGB",8, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-2)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CLRGB ::= Green DosPuntos Entero 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("CLRGB",8, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-2)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TAMANIO ::= Tamanio DosPuntos CorAbierto Cuadro DosPuntos Entero Coma Dimension DosPuntos Entero CorCerrado 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("TAMANIO",6, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-10)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TAMANIO ::= Tamanio DosPuntos CorAbierto Dimension DosPuntos Entero Coma Cuadro DosPuntos Entero CorCerrado 
            {
              String RESULT =null;

              CUP$canvas$result = parser.getSymbolFactory().newSymbol("TAMANIO",6, ((java_cup.runtime.Symbol)CUP$canvas$stack.elementAt(CUP$canvas$top-10)), ((java_cup.runtime.Symbol)CUP$canvas$stack.peek()), RESULT);
            }
          return CUP$canvas$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$canvas$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$canvas$do_action(
    int                        CUP$canvas$act_num,
    java_cup.runtime.lr_parser CUP$canvas$parser,
    java.util.Stack            CUP$canvas$stack,
    int                        CUP$canvas$top)
    throws java.lang.Exception
    {
              return CUP$canvas$do_action_part00000000(
                               CUP$canvas$act_num,
                               CUP$canvas$parser,
                               CUP$canvas$stack,
                               CUP$canvas$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package imageneditor.analisis;

import java_cup.runtime.*;
import imageneditor.frontEnd.buttonPlace;
import java.util.LinkedList;
import imageneditor.exceptions.InputsVaciosException;
import imageneditor.DefaultValue;
import imageneditor.objectsManager.miniPaintManager;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class miniPaint extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public miniPaint() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public miniPaint(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public miniPaint(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\007\000\002\002\004\000\002\002\013\000\002\002" +
    "\003\000\002\003\003\000\002\003\005\000\002\004\003" +
    "\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\006\003\005\004\004\001\002\000\004\031" +
    "\010\001\002\000\004\002\uffff\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\042\011\001" +
    "\002\000\004\025\012\001\002\000\004\045\014\001\002" +
    "\000\004\025\017\001\002\000\006\025\ufffe\026\015\001" +
    "\002\000\004\045\016\001\002\000\004\025\ufffd\001\002" +
    "\000\004\045\021\001\002\000\004\032\024\001\002\000" +
    "\006\026\022\032\ufffc\001\002\000\004\045\023\001\002" +
    "\000\004\032\ufffb\001\002\000\004\030\025\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$miniPaint$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$miniPaint$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$miniPaint$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	miniPaintManager miniPM;
	int dimension;
	int posX 	= DefaultValue.NO_INICIO_DIMENSION;
	int posXint = DefaultValue.NO_INICIO_DIMENSION;
	int posY 	= DefaultValue.NO_INICIO_DIMENSION;
	int posYint = DefaultValue.NO_INICIO_DIMENSION;
	String name = "";

	public miniPaint(Lexer lex, int dimension, miniPaintManager miniPM){
		super(lex);
		this.dimension = dimension;
		this.miniPM = miniPM;
	}

	private void setName(String name) throws InputsVaciosException {
		if (this.name.equals("")) {
			this.name = name;
		} else {
			throw new InputsVaciosException("The name " + name + " can't set");
		}
	}

	private void setPosX(int xPnt) throws InputsVaciosException {
		if (posX == DefaultValue.NO_INICIO_DIMENSION) {
			posX = xPnt;
		} else {
			throw new InputsVaciosException("Posicion en X >>" + xPnt + "<< can't set");
		}
	}

	private void setPosXint(int xPnt) throws InputsVaciosException {
		if (posXint == DefaultValue.NO_INICIO_DIMENSION) {
			posXint = xPnt;
		} else {
			throw new InputsVaciosException("Posicion en X >>" + xPnt + "<< can't set");
		}
	}

	private void setPosY(int yPnt) throws InputsVaciosException {
		if (posY == DefaultValue.NO_INICIO_DIMENSION) {
			posY = yPnt;
		} else {
			throw new InputsVaciosException("Posicion en Y >>" + yPnt + "<< can't set");
		}
	}

	private void setPosYint(int yPnt) throws InputsVaciosException {
		if (posYint == DefaultValue.NO_INICIO_DIMENSION) {
			posYint = yPnt;
		} else {
			throw new InputsVaciosException("Posicion en Y >>" + yPnt + "<< can't set");
		}
	}

	public void syntax_error(Symbol cur_token) {
		String message = "Estructura invalida en posiciÃ³n " + cur_token.right
			 + ", token: " + cur_token.value;
		System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<");	 
		System.out.println(message);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
	}

	public void returnCom() throws InputsVaciosException {
		if ((posX>DefaultValue.NO_INICIO_DIMENSION) && (posY>DefaultValue.NO_INICIO_DIMENSION) 
			&& (posXint==DefaultValue.NO_INICIO_DIMENSION) && (posYint==DefaultValue.NO_INICIO_DIMENSION)) {
			miniPM.getAuxPaint().setName(name);
			miniPM.getAuxPaint().setPosX(posX);
			miniPM.getAuxPaint().setPosXemd(posXint);
			miniPM.getAuxPaint().setPosY(posY);
			miniPM.getAuxPaint().setPosYemd(posYint);
		} else if ((posX>DefaultValue.NO_INICIO_DIMENSION) && (posY>DefaultValue.NO_INICIO_DIMENSION) && 
			(posXint>DefaultValue.NO_INICIO_DIMENSION) && (posYint==DefaultValue.NO_INICIO_DIMENSION) &&
			(posX<posXint) && (posX<=dimension) && (posXint<=dimension) && (posY<=dimension)) {
			miniPM.getAuxPaint().setName(name);
			miniPM.getAuxPaint().setPosX(posX);
			miniPM.getAuxPaint().setPosXemd(posXint);
			miniPM.getAuxPaint().setPosY(posY);
			miniPM.getAuxPaint().setPosYemd(posYint);
		} else if ((posX>DefaultValue.NO_INICIO_DIMENSION) && (posY>DefaultValue.NO_INICIO_DIMENSION) && 
			(posXint==DefaultValue.NO_INICIO_DIMENSION) && (posYint>DefaultValue.NO_INICIO_DIMENSION) &&
			(posY<posYint) && (posY<=dimension) && (posYint<=dimension) && (posX<=dimension)) {
			miniPM.getAuxPaint().setName(name);
			miniPM.getAuxPaint().setPosX(posX);
			miniPM.getAuxPaint().setPosXemd(posXint);
			miniPM.getAuxPaint().setPosY(posY);
			miniPM.getAuxPaint().setPosYemd(posYint);
		} else if ((posX>DefaultValue.NO_INICIO_DIMENSION) && (posY>DefaultValue.NO_INICIO_DIMENSION) && 
			(posXint>DefaultValue.NO_INICIO_DIMENSION) && (posYint>DefaultValue.NO_INICIO_DIMENSION) &&
			(posX<posXint) && (posY<posYint) && (posY<=dimension) && (posYint<=dimension) && (posX<=dimension) && (posXint<=dimension)) {
			miniPM.getAuxPaint().setName(name);
			miniPM.getAuxPaint().setPosX(posX);
			miniPM.getAuxPaint().setPosXemd(posXint);
			miniPM.getAuxPaint().setPosY(posY);
			miniPM.getAuxPaint().setPosYemd(posYint);
		} else {
			throw new InputsVaciosException("Invalid rank");
		}
		clear();
	}

	private void clear(){
		posX 	= DefaultValue.NO_INICIO_DIMENSION;
		posXint = DefaultValue.NO_INICIO_DIMENSION;
		posY 	= DefaultValue.NO_INICIO_DIMENSION;
		posYint = DefaultValue.NO_INICIO_DIMENSION;
		name = "";
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$miniPaint$actions {
  private final miniPaint parser;

  /** Constructor */
  CUP$miniPaint$actions(miniPaint parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$miniPaint$do_action_part00000000(
    int                        CUP$miniPaint$act_num,
    java_cup.runtime.lr_parser CUP$miniPaint$parser,
    java.util.Stack            CUP$miniPaint$stack,
    int                        CUP$miniPaint$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$miniPaint$result;

      /* select the action based on the action number */
      switch (CUP$miniPaint$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PAINT_COM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.elementAt(CUP$miniPaint$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.elementAt(CUP$miniPaint$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$miniPaint$stack.elementAt(CUP$miniPaint$top-1)).value;
		RESULT = start_val;
              CUP$miniPaint$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$miniPaint$stack.elementAt(CUP$miniPaint$top-1)), ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$miniPaint$parser.done_parsing();
          return CUP$miniPaint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PAINT_COM ::= Pintar ParAbierto Identificador Coma POS_X Coma POS_Y ParCerrado PuntoYComa 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.elementAt(CUP$miniPaint$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.elementAt(CUP$miniPaint$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$miniPaint$stack.elementAt(CUP$miniPaint$top-6)).value;
		 setName(e); returnCom();
              CUP$miniPaint$result = parser.getSymbolFactory().newSymbol("PAINT_COM",0, ((java_cup.runtime.Symbol)CUP$miniPaint$stack.elementAt(CUP$miniPaint$top-8)), ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()), RESULT);
            }
          return CUP$miniPaint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PAINT_COM ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$miniPaint$stack.peek()).value;
		 System.out.println("Error al usar el mini comando"); 
              CUP$miniPaint$result = parser.getSymbolFactory().newSymbol("PAINT_COM",0, ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()), ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()), RESULT);
            }
          return CUP$miniPaint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // POS_X ::= Entero 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$miniPaint$stack.peek()).value;
		 setPosX(Integer.parseInt(e)); 
              CUP$miniPaint$result = parser.getSymbolFactory().newSymbol("POS_X",1, ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()), ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()), RESULT);
            }
          return CUP$miniPaint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // POS_X ::= Entero Intervalo Entero 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.elementAt(CUP$miniPaint$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.elementAt(CUP$miniPaint$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$miniPaint$stack.elementAt(CUP$miniPaint$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$miniPaint$stack.peek()).value;
		 setPosX(Integer.parseInt(e1)); setPosXint(Integer.parseInt(e2)); 
              CUP$miniPaint$result = parser.getSymbolFactory().newSymbol("POS_X",1, ((java_cup.runtime.Symbol)CUP$miniPaint$stack.elementAt(CUP$miniPaint$top-2)), ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()), RESULT);
            }
          return CUP$miniPaint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // POS_Y ::= Entero 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$miniPaint$stack.peek()).value;
		 setPosY(Integer.parseInt(e)); 
              CUP$miniPaint$result = parser.getSymbolFactory().newSymbol("POS_Y",2, ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()), ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()), RESULT);
            }
          return CUP$miniPaint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // POS_Y ::= Entero Intervalo Entero 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.elementAt(CUP$miniPaint$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.elementAt(CUP$miniPaint$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$miniPaint$stack.elementAt(CUP$miniPaint$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$miniPaint$stack.peek()).value;
		 setPosY(Integer.parseInt(e1)); setPosYint(Integer.parseInt(e2)); 
              CUP$miniPaint$result = parser.getSymbolFactory().newSymbol("POS_Y",2, ((java_cup.runtime.Symbol)CUP$miniPaint$stack.elementAt(CUP$miniPaint$top-2)), ((java_cup.runtime.Symbol)CUP$miniPaint$stack.peek()), RESULT);
            }
          return CUP$miniPaint$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$miniPaint$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$miniPaint$do_action(
    int                        CUP$miniPaint$act_num,
    java_cup.runtime.lr_parser CUP$miniPaint$parser,
    java.util.Stack            CUP$miniPaint$stack,
    int                        CUP$miniPaint$top)
    throws java.lang.Exception
    {
              return CUP$miniPaint$do_action_part00000000(
                               CUP$miniPaint$act_num,
                               CUP$miniPaint$parser,
                               CUP$miniPaint$stack,
                               CUP$miniPaint$top);
    }
}

}

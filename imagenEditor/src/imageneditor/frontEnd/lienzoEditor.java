/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imageneditor.frontEnd;

import imageneditor.DefaultValue;
import imageneditor.analisis.Lexer;
import imageneditor.analisis.miniPaint;
import imageneditor.backEnd.AuxObjects.AuxPaint;
import imageneditor.backEnd.Objects.colorMaker;
import imageneditor.backEnd.Objects.colorObj;
import imageneditor.backEnd.Objects.instruccionsP;
import imageneditor.backEnd.Objects.lienzoObj;
import imageneditor.backEnd.Objects.paint;
import imageneditor.exceptions.InputsVaciosException;
import imageneditor.objectsManager.miniPaintManager;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Insets;
import java.io.StringReader;
import java.util.LinkedList;
import javax.swing.JButton;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author angel
 */
public class lienzoEditor extends javax.swing.JPanel {

    lienzoObj lienzo;
    colorObj colors;
    instruccionsP instructions;
    LinkedList<paint> paintlist = new LinkedList<>();
    LinkedList<LinkedList<LinkedList<buttonPlace>>> buttonList = new LinkedList<>();
    colorMaker selectedColor = new colorMaker();
    colorMaker colorFondo;

    int dimension;
    int pixels;

    Lexer lex;
    miniPaint miniP;
    AuxPaint AuxObj;
    miniPaintManager miniPM;

    /**
     * Creates new form lienzoEditor
     *
     * @param lienzo
     * @param colors
     * @param instructions
     */
    public lienzoEditor(lienzoObj lienzo, colorObj colors, instruccionsP instructions) {
        this.AuxObj = new AuxPaint();
        this.lienzo = lienzo;
        this.colors = colors;
        this.instructions = instructions;
        this.dimension = lienzo.getItSize().getDimension();
        this.pixels = lienzo.getItSize().getCuadro();
        this.colorFondo = new colorMaker("FONDO", this.lienzo.getFondo());
        this.lex = new Lexer(new StringReader(""));
        this.miniPM = new miniPaintManager(AuxObj);
        this.miniP = new miniPaint(lex, dimension, miniPM);
        initComponents();
        addPixels(lienzosPanel);
        tamanioLienzoLabel.setText("Tama√±o: " + dimension + " x " + dimension + ", Pixeles por cuadro: " + pixels);

        try {
            addPaintCom();
        } catch (Exception e) {
            System.out.println("Error: " + e);
            e.printStackTrace();
        }

        try {
            addColor(colorsPanel);
        } catch (Exception e) {
            System.out.println("Error: " + e);
            e.printStackTrace();
        }

    }

    public colorMaker returnColor(String name) {
        for (colorMaker colorList : colors.getColorList()) {
            if (colorList.getName().equals(name)) {
                return colorList;
            }
        }
        return null;
    }

    public boolean existColor(String name) {
        return (returnColor(name) != null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        coloresScrollPane = new javax.swing.JScrollPane();
        colorsPanel = new javax.swing.JPanel();
        agregarCommandTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        pintarCommandButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        informacionPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        actualColorButton = new javax.swing.JButton();
        borrarRadioButton = new javax.swing.JRadioButton();
        actualColorLabel = new javax.swing.JLabel();
        tamanioLienzoLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        historialTextPane = new javax.swing.JTextPane();
        lienzoScrollPane = new javax.swing.JScrollPane();
        lienzosPanel = new javax.swing.JPanel();

        colorsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        coloresScrollPane.setViewportView(colorsPanel);

        jLabel1.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel1.setText("Entrada");

        pintarCommandButton.setText("Pintar");
        pintarCommandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pintarCommandButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel2.setText("Historial");

        jLabel3.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel3.setText("Colores");

        jLabel4.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel4.setText("Lienzo");

        jLabel6.setText("Color Actual: ");

        borrarRadioButton.setText("Borrador Activado");

        actualColorLabel.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N

        tamanioLienzoLabel.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        tamanioLienzoLabel.setText("jLabel5");

        javax.swing.GroupLayout informacionPanelLayout = new javax.swing.GroupLayout(informacionPanel);
        informacionPanel.setLayout(informacionPanelLayout);
        informacionPanelLayout.setHorizontalGroup(
            informacionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informacionPanelLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(actualColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(actualColorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(borrarRadioButton)
                .addGap(18, 18, 18)
                .addComponent(tamanioLienzoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        informacionPanelLayout.setVerticalGroup(
            informacionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informacionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(informacionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(actualColorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(informacionPanelLayout.createSequentialGroup()
                        .addGap(0, 4, Short.MAX_VALUE)
                        .addGroup(informacionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(actualColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informacionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(borrarRadioButton)
                                .addComponent(tamanioLienzoLabel)))))
                .addContainerGap())
        );

        jScrollPane1.setViewportView(historialTextPane);

        javax.swing.GroupLayout lienzosPanelLayout = new javax.swing.GroupLayout(lienzosPanel);
        lienzosPanel.setLayout(lienzosPanelLayout);
        lienzosPanelLayout.setHorizontalGroup(
            lienzosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 816, Short.MAX_VALUE)
        );
        lienzosPanelLayout.setVerticalGroup(
            lienzosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 591, Short.MAX_VALUE)
        );

        lienzoScrollPane.setViewportView(lienzosPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(coloresScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lienzoScrollPane)
                            .addComponent(informacionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(agregarCommandTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(90, 90, 90))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(pintarCommandButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(agregarCommandTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pintarCommandButton)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addComponent(coloresScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lienzoScrollPane)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(informacionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void colorSelected(java.awt.event.ActionEvent ev, int index) {
        selectedColor = colors.getColor(index);
        setColorButton(this.actualColorButton, selectedColor);
        actualColorLabel.setText(selectedColor.getName());

        System.out.println("Color: " + selectedColor.getName());
    }

    private void setColorSelected(java.awt.event.ActionEvent ev, JButton boton) {
        if (borrarRadioButton.isSelected()) {
            Insets insets = lienzosPanel.getInsets();
            undoChange((boton.getLocation().x - insets.left) / pixels, (boton.getLocation().y - insets.top) / pixels, boton);
        } else {
            setColorButton(boton, selectedColor);
            Insets insets = lienzosPanel.getInsets();
            addChange((boton.getLocation().x - insets.left) / pixels, (boton.getLocation().y - insets.top) / pixels, boton, selectedColor);
        }
    }

    private void setColorButton(JButton boton, colorMaker newColor) {
        if ((newColor.getItsColor().getRed() > DefaultValue.INVALID_CL_CODE) && (newColor.getItsColor().getGreen() > DefaultValue.INVALID_CL_CODE) && (newColor.getItsColor().getBlue() > DefaultValue.INVALID_CL_CODE)) {
            boton.setBackground(new Color(newColor.getItsColor().getRed(), newColor.getItsColor().getGreen(), newColor.getItsColor().getBlue()));
        } else {
            boton.setBackground(Color.decode(newColor.getItsColor().getHexa()));
        }
    }

    private void setColorButton(JButton boton) {
        if ((lienzo.getFondo().getRed() > DefaultValue.INVALID_CL_CODE) && (lienzo.getFondo().getGreen() > DefaultValue.INVALID_CL_CODE) && (lienzo.getFondo().getBlue() > DefaultValue.INVALID_CL_CODE)) {
            boton.setBackground(new Color(lienzo.getFondo().getRed(), lienzo.getFondo().getGreen(), lienzo.getFondo().getBlue()));
        } else {
            boton.setBackground(Color.decode(lienzo.getFondo().getHexa()));
        }
    }

    private void changeColorButton(int x, int y, colorMaker newColor) {
        setColorButton(buttonList.get(x).get(y).getLast().getButton(), newColor);
        addChange(x, y, buttonList.get(x).get(y).getLast().getButton(), newColor);
    }

    public void addChange(int x, int y, JButton botton, colorMaker newColor) {
        buttonList.get(x).get(y).addLast(new buttonPlace(x, y, botton, newColor));
    }

    public void undoChange(int x, int y, JButton botton) {
        if (buttonList.get(x).get(y).size() > 1) {
            buttonList.get(x).get(y).removeLast();
            setColorButton(botton, buttonList.get(x).get(y).getLast().getSelectedColor());
        }
    }

    private void addPaintCom() {
        for (paint paintlist1 : instructions.getPaintlist()) {
            try {
                if ((paintlist1.getPosXEnd() < DefaultValue.INICIO_DIMENSION) && (paintlist1.getPosYEnd() < DefaultValue.INICIO_DIMENSION)) {
                    changeColorButton(paintlist1.getPosX() - 1, paintlist1.getPosY() - 1, paintlist1.getColorSelected());
                } else if ((paintlist1.getPosXEnd() > DefaultValue.NO_INICIO_DIMENSION) && (paintlist1.getPosYEnd() < DefaultValue.INICIO_DIMENSION)) {
                    for (int x = paintlist1.getPosX() - 1; x <= paintlist1.getPosXEnd() - 1; x++) {
                        changeColorButton(x, paintlist1.getPosY() - 1, paintlist1.getColorSelected());
                    }
                } else if ((paintlist1.getPosXEnd() < DefaultValue.INICIO_DIMENSION) && (paintlist1.getPosYEnd() > DefaultValue.NO_INICIO_DIMENSION)) {
                    for (int y = paintlist1.getPosY() - 1; y <= paintlist1.getPosYEnd() - 1; y++) {
                        changeColorButton(paintlist1.getPosX() - 1, y, paintlist1.getColorSelected());
                    }
                } else {
                    for (int x = paintlist1.getPosX() - 1; x <= paintlist1.getPosXEnd() - 1; x++) {
                        for (int y = paintlist1.getPosY() - 1; y <= paintlist1.getPosYEnd() - 1; y++) {
                            changeColorButton(x, y, paintlist1.getColorSelected());
                        }
                    }
                }
            } catch (Exception e) {
                System.out.println("Error al agregar estructura paint");
            }
        }
    }

    private void pintarCommandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pintarCommandButtonActionPerformed
        try {
            lex.yyreset(new StringReader(agregarCommandTextField.getText()));
            this.miniP.parse();

            if (existColor(AuxObj.getName())) {
                if ((AuxObj.getPosXemd() < DefaultValue.INICIO_DIMENSION) && (AuxObj.getPosYemd() < DefaultValue.INICIO_DIMENSION)) {
                    changeColorButton(AuxObj.getPosX() - 1, AuxObj.getPosY() - 1, returnColor(AuxObj.getName()));
                    append(Color.BLUE, agregarCommandTextField.getText(), historialTextPane);
                } else if ((AuxObj.getPosXemd() > DefaultValue.NO_INICIO_DIMENSION) && (AuxObj.getPosYemd() < DefaultValue.INICIO_DIMENSION)) {
                    for (int x = AuxObj.getPosX() - 1; x <= AuxObj.getPosXemd() - 1; x++) {
                        changeColorButton(x, AuxObj.getPosY() - 1, returnColor(AuxObj.getName()));
                    }
                    append(Color.BLUE, agregarCommandTextField.getText(), historialTextPane);
                } else if ((AuxObj.getPosXemd() < DefaultValue.INICIO_DIMENSION) && (AuxObj.getPosYemd() > DefaultValue.NO_INICIO_DIMENSION)) {
                    for (int y = AuxObj.getPosY() - 1; y <= AuxObj.getPosYemd() - 1; y++) {
                        changeColorButton(AuxObj.getPosX() - 1, y, returnColor(AuxObj.getName()));
                    }
                    append(Color.BLUE, agregarCommandTextField.getText(), historialTextPane);
                } else {
                    for (int x = AuxObj.getPosX() - 1; x <= AuxObj.getPosXemd() - 1; x++) {
                        for (int y = AuxObj.getPosY() - 1; y <= AuxObj.getPosYemd() - 1; y++) {
                            changeColorButton(x, y, returnColor(AuxObj.getName()));
                        }
                    }
                    append(Color.BLUE, agregarCommandTextField.getText(), historialTextPane);
                }
            } else {
                throw new InputsVaciosException("Doesn't exist the color");
            }
        } catch (Exception e) {
            System.out.println("Error en mini Paint: " + e);
            append(Color.red, e.getMessage() + "\n" + agregarCommandTextField.getText(), historialTextPane);
            e.printStackTrace();
        }

        agregarCommandTextField.setText("");
    }//GEN-LAST:event_pintarCommandButtonActionPerformed

    private void addPixels(Container pane) {
        //pane.setLayout(null);
        Dimension panelDimension = new Dimension(dimension * pixels, dimension * pixels);
        pane.setSize(panelDimension);
        pane.setPreferredSize(panelDimension);
        pane.setMinimumSize(panelDimension);

        Insets insets = pane.getInsets();
        for (int x = 0; x < dimension; x++) {
            LinkedList<LinkedList<buttonPlace>> auxListX = new LinkedList<>();
            buttonList.add(auxListX);
            for (int y = 0; y < dimension; y++) {
                JButton auxButton = new JButton();
                setColorButton(auxButton);
                LinkedList<buttonPlace> auxListY = new LinkedList<>();
                auxListY.add(new buttonPlace(x, y, auxButton, colorFondo));
                auxListX.add(auxListY);
                auxButton.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        setColorSelected(evt, auxButton);
                    }
                });
                pane.add(auxButton);
                auxButton.setBounds((x * pixels) + insets.left, (y * pixels) + insets.top, pixels, pixels);
            }
        }
        System.out.println("pixeles agregados");
    }

    private void addColor(Container pane) {
        pane.setLayout(null);
        int pixel = DefaultValue.BUTTON_SIZE;
        int dim = colors.colorListSize();

        Insets insets = pane.getInsets();
        for (int i = 0; i < dim; i++) {
            JButton auxButton = new JButton(colors.getColor(i).getName());
            setColorButton(auxButton, colors.getColor(i));
            final int i1 = i;
            auxButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    colorSelected(evt, i1);
                }
            });
            pane.add(auxButton);
            auxButton.setBounds(DefaultValue.BUTTON_SEPARATION + insets.left, (DefaultValue.BUTTON_SEPARATION + (i * (DefaultValue.BUTTON_SEPARATION + pixel))) + insets.top, pixel, pixel);
        }

        Dimension panelDimension = new Dimension(2 * DefaultValue.BUTTON_SEPARATION + DefaultValue.BUTTON_SIZE, DefaultValue.BUTTON_SEPARATION + dim * (DefaultValue.BUTTON_SEPARATION + pixel));
        pane.setSize(panelDimension);
        pane.setPreferredSize(panelDimension);
        pane.setMinimumSize(panelDimension);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualColorButton;
    private javax.swing.JLabel actualColorLabel;
    private javax.swing.JTextField agregarCommandTextField;
    private javax.swing.JRadioButton borrarRadioButton;
    private javax.swing.JScrollPane coloresScrollPane;
    private javax.swing.JPanel colorsPanel;
    private javax.swing.JTextPane historialTextPane;
    private javax.swing.JPanel informacionPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane lienzoScrollPane;
    private javax.swing.JPanel lienzosPanel;
    private javax.swing.JButton pintarCommandButton;
    private javax.swing.JLabel tamanioLienzoLabel;
    // End of variables declaration//GEN-END:variables

    private void append(Color c, String s, JTextPane panelComandos) {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        int len = panelComandos.getText().length();
        panelComandos.setCaretPosition(len);
        panelComandos.setCharacterAttributes(aset, false);
        panelComandos.replaceSelection(s + "\n");
    }

    public LinkedList<paint> getPaintlist() {
        return paintlist;
    }

    public void setPaintlist(LinkedList<paint> paintlist) {
        this.paintlist = paintlist;
    }

}
